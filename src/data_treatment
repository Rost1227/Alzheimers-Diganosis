import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder
import os

DATA_PATH = 'data/raw/alzheimers_disease_data.csv'

try:
    df = pd.read_csv(DATA_PATH)
    print('Dataset carregado com sucesso.')
except FileNotFoundError:
    print(f"Arquivo não encontrado no caminho: {DATA_PATH}")
    df = pd.DataFrame()

if not df.empty:
    print('\nInformações iniciais:')
    print(df.info())

    # Remover colunas irrelevantes
    df.drop(['PatientID', 'DoctorInCharge'], axis=1, inplace=True)

    # Verificar valores nulos
    print('\nValores nulos por coluna:')
    print(df.isnull().sum())

    # Remoção de valores nulos
    df.dropna(inplace=True)
    print('\nApós remoção de nulos:', df.shape)

    # Aplicar One-Hot Encoding para Ethnicity
    ethnicity_encoded = pd.get_dummies(df['Ethnicity'], prefix='Ethnicity')
    df = pd.concat([df.drop('Ethnicity', axis=1), ethnicity_encoded], axis=1)

    # Separar features e alvos
    X = df.drop('Diagnosis', axis=1)
    y = df['Diagnosis']

    # Padronização das features numéricas
    scaler = StandardScaler()
    X_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)

    print('\nPré-processamento concluído. Dataset pronto para modelagem.')

    print('\nDados pós processamento:')
    print(X_scaled.info())

    # Visualização de dados
    plt.figure(figsize=(10, 6))
    plt.hist(y, bins=3, color='blue', alpha=0.7, rwidth=0.85)
    plt.title('Distribuição de Diagnósticos')
    plt.xlabel('Diagnóstico')
    plt.ylabel('Frequência')
    plt.xticks([0, 1], ['Negative', 'Positive'])
    plt.show()
    print(y.value_counts(normalize=True))

else:
    print('Dataset vazio. Verifique o caminho e o nome do arquivo.')
